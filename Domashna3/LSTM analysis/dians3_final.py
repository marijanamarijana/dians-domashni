# -*- coding: utf-8 -*-
"""dians3 final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X5gjuToYpBOgKY4WMuM04EdQBRsocJhH
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
from sklearn.preprocessing import MinMaxScaler
from keras.api.models import Sequential
from keras.api.layers import Input, LSTM, Dense, Dropout

data  = pd.read_csv("issuer_data.csv")

data['Датум'] = pd.to_datetime(data['Датум'], format='%d.%m.%Y')
data = data.sort_values(by='Датум')

df = data.copy()

numeric_columns = [
     "Мак.", "Мин.", "Просечна цена", "%пром.", "Цена на последна трансакција",
     "Промет во БЕСТ во денари", "Вкупен промет во денари",
]

for col in numeric_columns:
    df[col] = (
        df[col]
        .str.replace(".", "", regex=False)
        .str.replace(",", ".", regex=False)
        .replace("NaN", np.nan)
        .astype(float)
    )

list1 = list(df.select_dtypes(include=["number"]))
list1

plt.figure(figsize=(20, 20))
sns.heatmap(df[list1].corr(), annot=True)
plt.show()

# gi zemame slabo koreliranite tabeli
dataset = df[['Датум', 'Цена на последна трансакција', 'Издавач', '%пром.', 'Количина', 'Промет во БЕСТ во денари', 'Вкупен промет во денари']].dropna()

dataset['date'] = dataset['Датум']
dataset['price'] = dataset['Цена на последна трансакција']
dataset['issuer'] = dataset['Издавач']
dataset['change'] = dataset['%пром.']
dataset['quantity'] = dataset['Количина']
dataset['best'] = dataset['Промет во БЕСТ во денари']
dataset['sum'] = dataset['Вкупен промет во денари']

dataset = dataset[['date', 'price', 'issuer', 'change', 'quantity', 'best', 'sum']].dropna()
dataset.set_index('date', inplace=True)

def shift_values(data: pd.DataFrame, columns: list):
    data_copy = data.copy()

    for column in columns:
        data_copy[f'{column}_1'] = data_copy[column].shift(1)
        data_copy[f'{column}_2'] = data_copy[column].shift(2)
        data_copy[f'{column}_3'] = data_copy[column].shift(3)
        data_copy[f'{column}_4'] = data_copy[column].shift(4)
        data_copy[f'{column}_5'] = data_copy[column].shift(5)

    #data_copy = data_copy[3:]
    data_copy = data_copy[5:]

    return data_copy

# funkcija za koga sakame za 1 izdavach da napravime model
def convert(name, dataset: pd.DataFrame):
  curr_data = [i for i in dataset.itertuples() if i[2]==name]
  curr_data = pd.DataFrame(curr_data, columns=['date', 'price', 'issuer', 'change', 'quantity', 'best', 'sum'])
  curr_data.set_index('date', inplace=True)
  return curr_data

def transform(curr_data: pd.DataFrame):
  dft = curr_data.copy()

  date_range = pd.date_range(start=dft.index.min(), end=dft.index.max(), freq='D')

  df_filled = dft.reindex(date_range, fill_value=None)

  df_filled['price'] = df_filled['price'].interpolate(method='linear')
  df_filled['change'] = df_filled['change'].interpolate(method='linear')
  df_filled['quantity'] = df_filled['quantity'].interpolate(method='linear')
  df_filled['best'] = df_filled['best'].interpolate(method='linear')
  df_filled['sum'] = df_filled['sum'].interpolate(method='linear')

  df_filled['price'] = df_filled['price'].astype(float, errors='ignore')
  df_filled['change'] = df_filled['change'].astype(float, errors='ignore')
  df_filled['quantity'] = df_filled['quantity'].astype(float, errors='ignore')
  df_filled['best'] = df_filled['best'].astype(float, errors='ignore')
  df_filled['sum'] = df_filled['sum'].astype(float, errors='ignore')

  df_filled.reset_index(inplace=True)
  df_filled.rename(columns={'index': 'date'}, inplace=True)

  return df_filled

def prepare_data(dataset :pd.DataFrame):
  data = shift_values(dataset, columns=['price', 'change', 'quantity', 'best', 'sum'])
  data.set_index('date', inplace=True)
  data = data.drop(columns=['change', 'quantity', 'best', 'sum'])

  X = data.drop(columns=['price'])
  Y = data['price']

  train_X, test_X, train_y, test_y = train_test_split(X, Y, test_size=0.3, shuffle=False)

  scaler = MinMaxScaler()
  train_X = scaler.fit_transform(train_X)
  test_X = scaler.transform(test_X)

  return train_X, test_X, train_y, test_y

def make_model(train_X, test_X, train_y, test_y):

  lag = 5

  train_X_laged = train_X.reshape(train_X.shape[0], lag, (train_X.shape[1] // lag))
  test_X_laged = test_X.reshape(test_X.shape[0], lag, (test_X.shape[1] // lag))

  model = Sequential([
    Input((train_X_laged.shape[1], train_X_laged.shape[2])),
    LSTM(64, activation="relu", return_sequences=True),
    LSTM(32, activation="relu"),
    Dense(1, activation="linear")
  ])

  model.compile(
      loss="mse",
      optimizer="adam",
      metrics=["r2_score", "mse", "mae"]
  )

  hist = model.fit(train_X_laged, train_y, validation_split=0.1, epochs=32, batch_size=64, shuffle=False)
  pred_y = model.predict(test_X_laged)

  # sns.lineplot(hist.history['loss'][1:], label='loss')
  # sns.lineplot(hist.history['val_loss'][1:], label='val_loss')

  model.save("LSTM_model_for_DIANS.keras")

  # for loading and using the model use:
  # from tensorflow.keras.models import load_model
  # model = load_model('LSTM_model_for_DIANS.h5') or model = load_model('LSTM_model_for_DIANS.keras')

  return pred_y

# primer za predeviduvanje model so 1 izdavach
curr = convert('MODA', dataset)
curr2 = transform(curr)
curr2 = curr2.drop(columns=['issuer'])
train_X, test_X, train_y, test_y = prepare_data(curr2)
pred_y = make_model(train_X, test_X, train_y, test_y)

print("rezultati za model so eden izdavach MODA:")
print(r2_score(test_y, pred_y))
print(mean_absolute_error(test_y, pred_y))
print(mean_squared_error(test_y, pred_y))

"""One model for all issuers:"""

# eden model za site izdavachi:
res = dataset.groupby("date").median(numeric_only=True)
results = transform(res)
train_X, test_X, train_y, test_y = prepare_data(results)
pred_y = make_model(train_X, test_X, train_y, test_y)

print("rezultati za model so lag 5:")
print(r2_score(test_y, pred_y))
print(mean_absolute_error(test_y, pred_y))
print(mean_squared_error(test_y, pred_y))